# Pre-commit hooks for EasyAuth Framework
# Install with: pip install pre-commit && pre-commit install

repos:
  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-xml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=crlf]
      - id: check-added-large-files
        args: [--maxkb=1000]

  # .NET specific hooks
  - repo: local
    hooks:
      # Format code with dotnet format
      - id: dotnet-format
        name: dotnet format
        entry: dotnet
        args: [format, --include]
        language: system
        files: \.cs$
        pass_filenames: true
        
      # Build solution to catch compilation errors
      - id: dotnet-build
        name: dotnet build
        entry: bash
        args: [-c, 'dotnet restore EasyAuth.Framework.sln --verbosity minimal && dotnet build EasyAuth.Framework.sln --configuration Release --no-restore --verbosity minimal']
        language: system
        files: \.(cs|csproj|sln)$
        pass_filenames: false
        
      # Run unit tests
      - id: dotnet-test
        name: dotnet test
        entry: bash
        args: [-c, 'dotnet test tests/EasyAuth.Framework.Core.Tests/EasyAuth.Framework.Core.Tests.csproj --configuration Release --no-build --verbosity minimal --logger "console;verbosity=minimal"']
        language: system
        files: \.(cs|csproj)$
        pass_filenames: false
        
      # Security scan with dependency check
      - id: dotnet-list-package-vulnerable
        name: check vulnerable packages
        entry: bash
        args: [-c, 'VULN_OUTPUT=$(dotnet list package --vulnerable --include-transitive 2>&1); if echo "$VULN_OUTPUT" | grep -q "has the following vulnerable packages"; then echo "$VULN_OUTPUT"; exit 1; fi']
        language: system
        files: \.(cs|csproj)$
        pass_filenames: false

      # Snyk security scanning (if available)
      - id: snyk-test
        name: snyk security scan
        entry: bash
        args: [-c, 'if command -v snyk &> /dev/null; then snyk test --severity-threshold=high --all-projects; else echo "⚠️ Snyk not installed, skipping security scan"; fi']
        language: system
        files: \.(cs|csproj|sln)$
        pass_filenames: false
        stages: [manual]
        
      # Check for outdated packages
      - id: dotnet-outdated
        name: check outdated packages
        entry: bash
        args: [-c, 'dotnet list package --outdated --include-transitive']
        language: system
        files: \.(csproj)$
        pass_filenames: false
        stages: [manual]

  # Security scanning
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package-lock\.json|\.git|\.vs|bin|obj

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]
        
  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        types: [yaml]

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # SQL formatting (if you have SQL files)
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.2
    hooks:
      - id: sqlfluff-lint
        additional_dependencies: ['dbt-core', 'dbt-postgres', 'sqlfluff-templater-dbt']
        files: \.sql$
        exclude: migrations/

# Configure the commit message format
default_language_version:
  python: python3

# Fail fast - stop running hooks after first failure
fail_fast: false