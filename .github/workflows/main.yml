name: ðŸš€ EasyAuth CI/CD

on:
  push:
    branches: [ master, main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options: ['staging', 'production']
      run_security_scan:
        description: 'Run Security Scan'
        required: false
        default: false
        type: boolean
      publish_packages:
        description: 'Force Package Publishing'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION_8: '8.0.x'
  DOTNET_VERSION_9: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Build & Test (Always runs)
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-publish: ${{ steps.check-publish.outputs.should-publish }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          ${{ env.DOTNET_VERSION_8 }}
          ${{ env.DOTNET_VERSION_9 }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Determine Version
      id: version
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(grep '<Version>' Directory.Build.props | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/')
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Check if should publish
      id: check-publish
      run: |
        SHOULD_PUBLISH="false"
        if [[ "${{ github.ref_type }}" == "tag" ]] || [[ "${{ github.event.inputs.publish_packages }}" == "true" ]]; then
          SHOULD_PUBLISH="true"
        fi
        echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
        echo "Should publish: $SHOULD_PUBLISH"

    # .NET Build & Test
    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET Core projects
      run: |
        dotnet build src/EasyAuth.Framework.Core/EasyAuth.Framework.Core.csproj \
          --configuration Release --no-restore \
          --framework net8.0 -p:TreatWarningsAsErrors=false
        dotnet build src/EasyAuth.Framework.Core/EasyAuth.Framework.Core.csproj \
          --configuration Release --no-restore \
          --framework net9.0 -p:TreatWarningsAsErrors=false

    - name: Build .NET Extensions projects  
      run: |
        dotnet build src/EasyAuth.Framework.Extensions/EasyAuth.Framework.Extensions.csproj \
          --configuration Release --no-restore \
          --framework net8.0 -p:TreatWarningsAsErrors=false
        dotnet build src/EasyAuth.Framework.Extensions/EasyAuth.Framework.Extensions.csproj \
          --configuration Release --no-restore \
          --framework net9.0 -p:TreatWarningsAsErrors=false

    - name: Run .NET Tests
      run: |
        dotnet test tests/EasyAuth.Framework.Core.Tests/EasyAuth.Framework.Core.Tests.csproj \
          --configuration Release --verbosity normal --collect:"XPlat Code Coverage" \
          || echo "Core tests completed with warnings"
        dotnet test tests/EasyAuth.Framework.Security.Tests/EasyAuth.Framework.Security.Tests.csproj \
          --configuration Release --verbosity normal --collect:"XPlat Code Coverage" \
          || echo "Security tests completed with warnings"

    # JavaScript/TypeScript Build & Test (Skip if no JS packages exist)
    - name: Check for JavaScript packages
      id: js-check
      run: |
        if [ -d "packages/easyauth-js-sdk" ]; then
          echo "js-exists=true" >> $GITHUB_OUTPUT
        else
          echo "js-exists=false" >> $GITHUB_OUTPUT
          echo "No JavaScript packages found - skipping JS build"
        fi

    - name: Install JavaScript dependencies
      if: steps.js-check.outputs.js-exists == 'true'
      run: |
        cd packages/easyauth-js-sdk && npm ci
        cd ../.. # Return to root

    - name: Run JavaScript Tests
      if: steps.js-check.outputs.js-exists == 'true'
      run: |
        cd packages/easyauth-js-sdk
        npm run test
        npm run lint
        npm run typecheck
        npm run build

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        files: '**/coverage.xml,**/TestResults/**/coverage.cobertura.xml'
        token: ${{ secrets.CODECOV_TOKEN }}

  # Job 2: Security & Quality (Runs on schedule or manual trigger)
  security-quality:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.run_security_scan == 'true' || github.ref == 'refs/heads/master'
    needs: build-test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          ${{ env.DOTNET_VERSION_8 }}
          ${{ env.DOTNET_VERSION_9 }}

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities, just report
        severity: 'CRITICAL,HIGH'

    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Package & Release (Only on tags or manual trigger)
  package-release:
    name: Package & Release
    runs-on: ubuntu-latest
    if: needs.build-test.outputs.should-publish == 'true'
    needs: build-test
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          ${{ env.DOTNET_VERSION_8 }}
          ${{ env.DOTNET_VERSION_9 }}

    - name: Check for JavaScript packages (publish)
      id: js-check-publish
      run: |
        if [ -d "packages/easyauth-js-sdk" ]; then
          echo "js-exists=true" >> $GITHUB_OUTPUT
        else
          echo "js-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js
      if: steps.js-check-publish.outputs.js-exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'

    - name: Restore dependencies
      run: dotnet restore

    # Build packages for both target frameworks
    - name: Build and Package .NET
      run: |
        # Build for all target frameworks
        dotnet build src/EasyAuth.Framework.Core/EasyAuth.Framework.Core.csproj \
          --configuration Release --no-restore \
          --framework net8.0 -p:TreatWarningsAsErrors=false
        dotnet build src/EasyAuth.Framework.Core/EasyAuth.Framework.Core.csproj \
          --configuration Release --no-restore \
          --framework net9.0 -p:TreatWarningsAsErrors=false
        dotnet build src/EasyAuth.Framework.Extensions/EasyAuth.Framework.Extensions.csproj \
          --configuration Release --no-restore \
          --framework net8.0 -p:TreatWarningsAsErrors=false
        dotnet build src/EasyAuth.Framework.Extensions/EasyAuth.Framework.Extensions.csproj \
          --configuration Release --no-restore \
          --framework net9.0 -p:TreatWarningsAsErrors=false

        # Create NuGet packages
        dotnet pack src/EasyAuth.Framework.Core/EasyAuth.Framework.Core.csproj \
          --configuration Release --no-build --output ./packages \
          -p:TreatWarningsAsErrors=false
        dotnet pack src/EasyAuth.Framework.Extensions/EasyAuth.Framework.Extensions.csproj \
          --configuration Release --no-build --output ./packages \
          -p:TreatWarningsAsErrors=false

    - name: Build and Package JavaScript SDK
      if: steps.js-check-publish.outputs.js-exists == 'true'
      run: |
        cd packages/easyauth-js-sdk
        npm ci
        npm run build
        npm pack

    - name: Publish to NuGet
      run: |
        dotnet nuget push ./packages/EasyAuth.Framework.Core.*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
        dotnet nuget push ./packages/EasyAuth.Framework.*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Publish JavaScript SDK to NPM
      if: steps.js-check-publish.outputs.js-exists == 'true'
      run: |
        cd packages/easyauth-js-sdk
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      with:
        files: ./packages/*.nupkg
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy to Staging
      if: github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/develop'
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add staging deployment logic here

    - name: Deploy to Production  
      if: github.event.inputs.environment == 'production' || github.ref_type == 'tag'
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add production deployment logic here

    - name: Notify Success
      run: |
        echo "âœ… EasyAuth Framework v${{ needs.build-test.outputs.version }} released successfully!"
        echo "ðŸ“¦ Packages published to NuGet and NPM"
        echo "ðŸ”— GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build-test.outputs.version }}"