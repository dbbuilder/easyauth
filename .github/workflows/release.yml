name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION_8: '8.0.x'
  DOTNET_VERSION_9: '9.0.x'
  SOLUTION_FILE: 'EasyAuth.Framework.sln'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          if [[ "$VERSION" == *"-"* ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Is Pre-release: $IS_PRERELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Version must follow semantic versioning (e.g., 1.2.3 or 1.2.3-beta.1)"
          exit 1
        fi
        
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          ${{ env.DOTNET_VERSION_8 }}
          ${{ env.DOTNET_VERSION_9 }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Update version in project files
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        find . -name "*.csproj" -exec sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>$VERSION<\/PackageVersion>/g" {} \;
        find . -name "*.csproj" -exec sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" {} \;
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore --verbosity minimal
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity minimal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Create NuGet packages
      run: dotnet pack ${{ env.SOLUTION_FILE }} --configuration Release --no-build --output ./packages
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ needs.validate-release.outputs.version }}
        path: ./packages/*.nupkg

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, security-scan]
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.validate-release.outputs.version }}
        path: ./packages
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, generating initial changelog"
          CHANGELOG="Initial release of EasyAuth Framework"
        else
          echo "Generating changelog from $PREVIOUS_TAG to HEAD"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -50)
        fi
        
        # Create a more detailed changelog
        cat > release-notes.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        ## Package Information
        
        This release includes the following NuGet packages:
        - \`EasyAuth.Framework.Core\` - Core authentication framework
        - \`EasyAuth.Framework.Extensions\` - Extension methods and utilities
        
        ## Installation
        
        \`\`\`bash
        dotnet add package EasyAuth.Framework.Core --version ${{ needs.validate-release.outputs.version }}
        \`\`\`
        
        ## Documentation
        
        For detailed documentation, visit our [GitHub repository](https://github.com/dbbuilder/easyauth).
        
        ---
        
        **Full Changelog**: https://github.com/dbbuilder/easyauth/compare/$PREVIOUS_TAG...v${{ needs.validate-release.outputs.version }}
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        files: ./packages/*.nupkg
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        generate_release_notes: true
        make_latest: ${{ needs.validate-release.outputs.is-prerelease == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success()
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages-${{ needs.validate-release.outputs.version }}
        path: ./packages
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          ${{ env.DOTNET_VERSION_8 }}
          ${{ env.DOTNET_VERSION_9 }}
        
    - name: Publish to NuGet
      run: |
        for package in ./packages/*.nupkg; do
          echo "Publishing $package to NuGet..."
          dotnet nuget push "$package" \
            --api-key "${{ secrets.NUGET_API_KEY }}" \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate \
            --no-symbols
        done
        
  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, publish-nuget]
    if: success() && needs.validate-release.outputs.is-prerelease == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update README badges
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sed -i "s/badge\/Version-.*-blue/badge\/Version-$VERSION-blue/g" README.md
        
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "docs: Update version badges to v${{ needs.validate-release.outputs.version }} [skip ci]"
        git push

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-nuget]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.publish-nuget.result == 'success'
      run: |
        echo "🎉 Release v${{ needs.validate-release.outputs.version }} has been successfully published!"
        echo "📦 NuGet packages are available at https://www.nuget.org/packages/EasyAuth.Framework.Core/"
        echo "📋 Release notes: https://github.com/dbbuilder/easyauth/releases/tag/v${{ needs.validate-release.outputs.version }}"
        
    - name: Notify failure
      if: needs.publish-nuget.result == 'failure'
      run: |
        echo "❌ Release v${{ needs.validate-release.outputs.version }} failed!"
        echo "Check the workflow logs for details."
        exit 1