<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyAuth.Framework.Core</name>
    </assembly>
    <members>
        <member name="T:EasyAuth.Framework.Core.Configuration.EAuthCorsConfiguration">
            <summary>
            Auto-configures CORS for EasyAuth endpoints with smart origin detection
            Eliminates manual CORS setup complexity for frontend integration
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EAuthCorsConfiguration.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures CORS services with EasyAuth-specific policies
            Includes auto-detection of development servers and zero-config experience
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EAuthCorsConfiguration.ConfigureMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Applies CORS middleware with automatic policy selection
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions">
            <summary>
            Configuration options for EasyAuth CORS behavior
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions.AllowedOrigins">
            <summary>
            Explicitly allowed origins
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions.AllowedMethods">
            <summary>
            Allowed HTTP methods
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions.AllowedHeaders">
            <summary>
            Allowed HTTP headers
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions.EnableAutoDetection">
            <summary>
            Enable automatic origin detection and learning
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions.AutoLearnOrigins">
            <summary>
            Automatically learn and remember new development origins
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthCorsOptions.PreflightMaxAge">
            <summary>
            Maximum age for preflight cache in seconds
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.EAuthCorsDetectionMiddleware">
            <summary>
            Middleware to automatically detect and configure CORS for frontend origins
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults">
            <summary>
            Default configuration values and auto-detection logic for EasyAuth Framework
            Provides zero-configuration development experience
            </summary>
        </member>
        <member name="F:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.CommonDevPorts">
            <summary>
            Common development server ports used by popular frontend frameworks
            </summary>
        </member>
        <member name="F:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.FrameworkPorts">
            <summary>
            Framework-specific port mappings for targeted auto-configuration
            </summary>
        </member>
        <member name="F:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.LocalhostPatterns">
            <summary>
            Common localhost patterns that should be allowed in development
            </summary>
        </member>
        <member name="F:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.CloudDevDomains">
            <summary>
            Cloud development environment domains that should be allowed
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.GenerateLocalhostOrigins(System.String[])">
            <summary>
            Generates all possible localhost origins for common development ports
            </summary>
            <param name="includePorts">Specific ports to include, null for all common ports</param>
            <returns>List of localhost origins</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.DetectRunningDevServers">
            <summary>
            Detects running development servers by scanning active processes
            </summary>
            <returns>List of detected origins from running dev servers</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.GetCommandLine(System.Diagnostics.Process)">
            <summary>
            Gets command line arguments for a process (platform-specific implementation)
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.ExtractPortsFromCommandLine(System.String)">
            <summary>
            Extracts port numbers from command line arguments
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.IsDevelopmentEnvironment">
            <summary>
            Checks if the current environment is development
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.GetFrameworkOrigins(System.String)">
            <summary>
            Gets framework-specific origins for a particular frontend framework
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.EasyAuthDefaults.GetAllDevelopmentOrigins">
            <summary>
            Generates a comprehensive list of development origins
            Combines detected servers, common ports, and framework-specific ports
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.EAuthOptions">
            <summary>
            Main configuration options for the EasyAuth Framework
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthOptions.ConnectionString">
            <summary>
            Database connection string - can be direct value or Key Vault reference
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthOptions.KeyVault">
            <summary>
            Azure Key Vault configuration (optional)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthOptions.Providers">
            <summary>
            Authentication providers configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthOptions.Framework">
            <summary>
            Framework behavior settings
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthOptions.Session">
            <summary>
            Session configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.EAuthOptions.Cors">
            <summary>
            CORS configuration for frontend applications
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.KeyVaultOptions">
            <summary>
            Azure Key Vault configuration for secure secret management
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.KeyVaultOptions.BaseUrl">
            <summary>
            Base URL of the Azure Key Vault (e.g., https://myvault.vault.azure.net/)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.KeyVaultOptions.UseConnectionStringFromKeyVault">
            <summary>
            Whether to retrieve database connection string from Key Vault
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.KeyVaultOptions.ConnectionStringSecretName">
            <summary>
            Name of the secret containing the database connection string in Key Vault
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.KeyVaultOptions.SecretNames">
            <summary>
            Mapping of configuration keys to Key Vault secret names
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AuthProvidersOptions.AzureB2C">
            <summary>
            Azure AD B2C provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AuthProvidersOptions.Google">
            <summary>
            Google OAuth provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AuthProvidersOptions.Facebook">
            <summary>
            Facebook OAuth provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AuthProvidersOptions.Apple">
            <summary>
            Apple Sign-In provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AuthProvidersOptions.DefaultProvider">
            <summary>
            Default provider to use for new registrations
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AuthProvidersOptions.AllowAccountLinking">
            <summary>
            Allow account linking across providers
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.AzureB2COptions">
            <summary>
            Azure Active Directory B2C authentication provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.Enabled">
            <summary>
            Whether Azure B2C authentication is enabled
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.Instance">
            <summary>
            Azure B2C instance URL (e.g., https://login.microsoftonline.com/)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.Domain">
            <summary>
            Azure B2C domain (e.g., mycompany.b2clogin.com)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.TenantId">
            <summary>
            Azure B2C tenant identifier
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.ClientId">
            <summary>
            Application (client) ID registered in Azure B2C
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.ClientSecret">
            <summary>
            Client secret - will be loaded from Key Vault if configured
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.SignUpSignInPolicyId">
            <summary>
            Sign-up and sign-in policy ID (user flow)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.ResetPasswordPolicyId">
            <summary>
            Password reset policy ID (user flow)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.EditProfilePolicyId">
            <summary>
            Profile editing policy ID (user flow)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.CallbackPath">
            <summary>
            OAuth callback path for Azure B2C sign-in
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.SignedOutCallbackPath">
            <summary>
            Callback path after sign-out
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AzureB2COptions.Scopes">
            <summary>
            OAuth scopes to request from Azure B2C
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.AzureB2COptions.GetAuthorityUrl">
            <summary>
            Gets the B2C authority URL based on tenant and custom domain settings
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.AzureB2COptions.GetAuthorizationEndpoint(System.String)">
            <summary>
            Gets the B2C authorization endpoint for the specified policy
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.AzureB2COptions.GetTokenEndpoint(System.String)">
            <summary>
            Gets the B2C token endpoint for the specified policy
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Configuration.AzureB2COptions.GetTenantName">
            <summary>
            Gets the tenant name from TenantId (removes .onmicrosoft.com if present)
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.GoogleOptions">
            <summary>
            Google OAuth 2.0 authentication provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.GoogleOptions.Enabled">
            <summary>
            Whether Google authentication is enabled
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.GoogleOptions.ClientId">
            <summary>
            Google OAuth client ID from Google Cloud Console
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.GoogleOptions.ClientSecret">
            <summary>
            Google OAuth client secret - will be loaded from Key Vault if configured
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.GoogleOptions.CallbackPath">
            <summary>
            OAuth callback path for Google sign-in
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.GoogleOptions.Scopes">
            <summary>
            OAuth scopes to request from Google
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.FacebookOptions">
            <summary>
            Facebook OAuth authentication provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FacebookOptions.Enabled">
            <summary>
            Whether Facebook authentication is enabled
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FacebookOptions.AppId">
            <summary>
            Facebook App ID from Facebook Developers Console
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FacebookOptions.AppSecret">
            <summary>
            Facebook App Secret - will be loaded from Key Vault if configured
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FacebookOptions.CallbackPath">
            <summary>
            OAuth callback path for Facebook sign-in
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FacebookOptions.Scopes">
            <summary>
            OAuth scopes to request from Facebook
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.AppleOptions">
            <summary>
            Apple Sign-In authentication provider configuration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.Enabled">
            <summary>
            Whether Apple Sign-In authentication is enabled
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.ClientId">
            <summary>
            Apple Services ID (client identifier)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.TeamId">
            <summary>
            Apple Developer Team ID
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.KeyId">
            <summary>
            Apple Key ID for JWT signing
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.ClientSecret">
            <summary>
            Client secret - will be loaded from Key Vault if configured
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.JwtSecret">
            <summary>
            JWT signing secret for Apple Sign-In token generation and validation
            SECURITY: This must come from environment variables or Key Vault - NEVER hardcode in production
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.CallbackPath">
            <summary>
            OAuth callback path for Apple Sign-In
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.AppleOptions.Scopes">
            <summary>
            OAuth scopes to request from Apple
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.FrameworkSettings">
            <summary>
            EasyAuth Framework behavior and feature settings
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.AutoDatabaseSetup">
            <summary>
            Whether to automatically set up database schema on startup
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.EnableSwagger">
            <summary>
            Whether to enable Swagger API documentation
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.EnableHealthChecks">
            <summary>
            Whether to enable ASP.NET Core health checks
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.ApiPrefix">
            <summary>
            API route prefix for EasyAuth endpoints
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.TokenExpirationMinutes">
            <summary>
            Default token expiration time in minutes
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.EnableDetailedErrors">
            <summary>
            Whether to include detailed error information in responses (disable in production)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.EnableAuditLogging">
            <summary>
            Whether to enable audit logging of authentication events
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.FrameworkSettings.SessionCleanupIntervalMinutes">
            <summary>
            Interval in minutes for automatic session cleanup
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.SessionOptions">
            <summary>
            User session and cookie configuration options
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.SessionOptions.IdleTimeoutHours">
            <summary>
            Session idle timeout in hours before automatic expiration
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.SessionOptions.HttpOnly">
            <summary>
            Whether session cookies should be HTTP-only (recommended for security)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.SessionOptions.Secure">
            <summary>
            Whether session cookies require HTTPS (recommended for production)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.SessionOptions.SameSite">
            <summary>
            SameSite cookie attribute for CSRF protection
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.SessionOptions.CookieName">
            <summary>
            Name of the session cookie
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.SessionOptions.SlidingExpiration">
            <summary>
            Whether to use sliding expiration (session timeout resets on activity)
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Configuration.CorsOptions">
            <summary>
            Cross-Origin Resource Sharing (CORS) configuration for frontend applications
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.CorsOptions.AllowedOrigins">
            <summary>
            List of allowed origin URLs for CORS requests
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.CorsOptions.AllowCredentials">
            <summary>
            Whether to allow credentials (cookies, authorization headers) in CORS requests
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.CorsOptions.AllowedMethods">
            <summary>
            List of allowed HTTP methods for CORS requests
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Configuration.CorsOptions.AllowedHeaders">
            <summary>
            List of allowed headers for CORS requests
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Controllers.EAuthController">
            <summary>
            EasyAuth authentication controller for handling user authentication flows
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.GetProviders">
            <summary>
            Get all available authentication providers
            </summary>
            <returns>List of configured authentication providers</returns>
            <response code="200">Successfully retrieved available providers</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.Login(EasyAuth.Framework.Core.Models.LoginRequest)">
            <summary>
            Initiate login with specified provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.AuthCallback(System.String,System.String,System.String)">
            <summary>
            Handle authentication callback from provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.Logout">
            <summary>
            Sign out current user
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.GetCurrentUser">
            <summary>
            Get current user information
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.ValidateSession(System.String)">
            <summary>
            Validate current session
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.LinkAccount(System.String,EasyAuth.Framework.Core.Controllers.LinkAccountRequest)">
            <summary>
            Link account from another provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.UnlinkAccount(System.String)">
            <summary>
            Unlink account from provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.EAuthController.ResetPassword(EasyAuth.Framework.Core.Models.PasswordResetRequest)">
            <summary>
            Initiate password reset
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Controllers.LinkAccountRequest">
            <summary>
            Request model for linking accounts
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Controllers.LinkAccountRequest.Code">
            <summary>
            Authorization code from the OAuth provider
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Controllers.LinkAccountRequest.State">
            <summary>
            State parameter for CSRF protection
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Controllers.StandardApiController">
            <summary>
            Standard API endpoints that frontend applications expect
            Based on real-world integration experience and common patterns
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.StandardApiController.CheckAuthStatus">
            <summary>
            Check authentication status - the most commonly needed endpoint
            Frontend apps call this to determine if user is logged in
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.StandardApiController.Login(EasyAuth.Framework.Core.Models.LoginRequest)">
            <summary>
            Login endpoint that frontends expect
            Redirects to OAuth provider or handles direct login
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.StandardApiController.Logout">
            <summary>
            Logout endpoint - clears session and tokens
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.StandardApiController.RefreshToken(EasyAuth.Framework.Core.Controllers.RefreshTokenRequest)">
            <summary>
            Refresh JWT tokens
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.StandardApiController.GetUserProfile">
            <summary>
            Get user profile - commonly needed endpoint
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Controllers.StandardApiController.HealthCheck">
            <summary>
            Health check endpoint for monitoring
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Controllers.RefreshTokenRequest">
            <summary>
            Refresh token request model
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions">
            <summary>
            Application builder extensions for EasyAuth Framework
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions.UseEasyAuth(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures EasyAuth middleware and endpoints with automatic Swagger setup
            Provides zero-configuration development experience with auto-CORS detection
            </summary>
            <param name="app">Application builder</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions.UseEasyAuthSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures EasyAuth Swagger UI with enhanced developer experience
            </summary>
            <param name="app">Application builder</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions.UseEasyAuthCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures EasyAuth CORS with smart development detection
            </summary>
            <param name="app">Application builder</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions.MapEasyAuthEndpoints(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Maps EasyAuth endpoints with enhanced Swagger documentation
            </summary>
            <param name="app">Application builder</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions.UseEasyAuthComplete(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})">
            <summary>
            Adds comprehensive EasyAuth middleware pipeline
            </summary>
            <param name="app">Application builder</param>
            <param name="configureEndpoints">Optional endpoint configuration</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ApplicationBuilderExtensions.ValidateProductionSecurity(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Validates production security configuration and provides warnings
            </summary>
            <param name="app">Application builder</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions">
            <summary>
            Authentication-specific controller extension methods
            Provides consistent auth-related API responses
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.AuthStatus(Microsoft.AspNetCore.Mvc.ControllerBase,System.Boolean,EasyAuth.Framework.Core.Models.ApiUserInfo,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Returns authentication status response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.LoginResponse(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns login initiation response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.TokenRefreshResponse(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.Int32)">
            <summary>
            Returns token refresh response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.LogoutResponse(Microsoft.AspNetCore.Mvc.ControllerBase,System.Boolean,System.String)">
            <summary>
            Returns logout response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.InvalidProvider(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns invalid provider error
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.TokenExpired(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns token expired error
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.SessionExpired(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns session expired error
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.ProviderUnavailable(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String)">
            <summary>
            Returns provider unavailable error
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.AuthControllerExtensions.GetCorrelationId(Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            Gets or generates a correlation ID for request tracing
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.ControllerExtensions">
            <summary>
            Extension methods for controllers to return consistent API responses
            Ensures all EasyAuth endpoints follow the same response format
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiOk``1(Microsoft.AspNetCore.Mvc.ControllerBase,``0,System.String)">
            <summary>
            Returns a successful response with data
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiOk(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns a successful response without data
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiCreated``1(Microsoft.AspNetCore.Mvc.ControllerBase,``0,System.String)">
            <summary>
            Returns a created response with data
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiBadRequest(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.Object)">
            <summary>
            Returns a bad request response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiValidationError(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.Collections.Generic.Dictionary{System.String,System.String[]})">
            <summary>
            Returns a validation error response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiUnauthorized(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns an unauthorized response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiForbidden(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns a forbidden response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiNotFound(Microsoft.AspNetCore.Mvc.ControllerBase,System.String)">
            <summary>
            Returns a not found response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiInternalError(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.Object)">
            <summary>
            Returns an internal server error response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiConflict(Microsoft.AspNetCore.Mvc.ControllerBase,System.String,System.String,System.Object)">
            <summary>
            Returns a conflict response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.ApiResponseWithStatus``1(Microsoft.AspNetCore.Mvc.ControllerBase,System.Int32,EasyAuth.Framework.Core.Models.ApiResponse{``0})">
            <summary>
            Returns a custom status code response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ControllerExtensions.GetCorrelationId(Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            Gets or generates a correlation ID for request tracing
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.CorrelationIdMiddleware">
            <summary>
            Middleware to add correlation ID to all responses
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.EAuthCorsExtensions">
            <summary>
            Extension methods to simplify EasyAuth CORS configuration
            Provides zero-config CORS setup for any frontend framework
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthCorsExtensions.AddEasyAuthCors(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EasyAuth.Framework.Core.Configuration.EAuthCorsOptions})">
            <summary>
            Adds EasyAuth CORS services with automatic configuration
            Call this in Program.cs ConfigureServices
            </summary>
            <param name="services">Service collection</param>
            <param name="configureOptions">Optional CORS configuration</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthCorsExtensions.UseEasyAuthCors(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses EasyAuth CORS middleware with automatic origin detection
            Call this in Program.cs Configure pipeline, before UseRouting
            </summary>
            <param name="app">Application builder</param>
            <returns>Application builder for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthCorsExtensions.AddEasyAuthOrigin(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Adds a specific origin to allowed CORS origins at runtime
            Useful for dynamic origin registration
            </summary>
            <param name="services">Service collection</param>
            <param name="origin">Origin to allow (e.g., "https://myapp.com")</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthCorsExtensions.AddEasyAuthCorsForFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyAuth.Framework.Core.Extensions.FrontendFramework)">
            <summary>
            Configures EasyAuth CORS for a specific frontend framework
            </summary>
            <param name="services">Service collection</param>
            <param name="framework">Frontend framework type</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthCorsExtensions.AddEasyAuthCorsForScenario(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyAuth.Framework.Core.Extensions.DeploymentScenario,System.String[])">
            <summary>
            Quickly configure CORS for common deployment scenarios
            </summary>
            <param name="services">Service collection</param>
            <param name="scenario">Deployment scenario</param>
            <param name="customOrigins">Additional custom origins</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.FrontendFramework">
            <summary>
            Supported frontend frameworks for automatic CORS configuration
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.DeploymentScenario">
            <summary>
            Common deployment scenarios for CORS configuration
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring EasyAuth services in DI container
            Follows TDD methodology - minimal implementation to make tests pass
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuth(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds EasyAuth framework services to the DI container
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Configuration containing EasyAuth settings</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuth(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{EasyAuth.Framework.Core.Configuration.EAuthOptions})">
            <summary>
            Adds EasyAuth framework services with action-based configuration
            </summary>
            <param name="services">Service collection</param>
            <param name="configureOptions">Configuration action</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuth(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{EasyAuth.Framework.Core.Extensions.EAuthServiceOptions})">
            <summary>
            Adds EasyAuth with custom service configuration
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Configuration</param>
            <param name="configureServices">Custom service configuration</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuthProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds only the authentication providers (without core services)
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Configuration</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuthProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyAuth.Framework.Core.Configuration.EAuthOptions)">
            <summary>
            Adds only the authentication providers with options
            </summary>
            <param name="services">Service collection</param>
            <param name="options">EasyAuth options</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuthDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds only the database services
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Configuration</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuthDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,EasyAuth.Framework.Core.Configuration.EAuthOptions)">
            <summary>
            Adds only the database services with options
            </summary>
            <param name="services">Service collection</param>
            <param name="options">EasyAuth options</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.ServiceCollectionExtensions.AddEasyAuthSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds comprehensive Swagger/OpenAPI documentation for EasyAuth endpoints
            </summary>
            <param name="services">Service collection</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.EAuthServiceOptions">
            <summary>
            Custom service configuration options for EasyAuth
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Extensions.EAuthServiceOptions.Services">
            <summary>
            Service collection for advanced customization
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthServiceOptions.Replace``1(``0)">
            <summary>
            Replace a service registration
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="implementation">New implementation</param>
        </member>
        <member name="M:EasyAuth.Framework.Core.Extensions.EAuthServiceOptions.AddCustomProvider``1">
            <summary>
            Add a custom provider
            </summary>
            <typeparam name="T">Provider type</typeparam>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.EAuthBackgroundService">
            <summary>
            Background service for EasyAuth maintenance tasks
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.EasyAuthSchemaFilter">
            <summary>
            Custom schema filter for enhanced EasyAuth API documentation
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Extensions.EasyAuthOperationFilter">
            <summary>
            Custom operation filter for enhanced EasyAuth endpoint documentation
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ApiResponse`1">
            <summary>
            Unified API response format for all EasyAuth endpoints
            Provides consistent structure that frontend applications can rely on
            </summary>
            <typeparam name="T">Type of data being returned</typeparam>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Success">
            <summary>
            Whether the operation was successful
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Data">
            <summary>
            The response data (null if operation failed or no data)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Message">
            <summary>
            Human-readable message describing the result
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Error">
            <summary>
            Error code for failed operations (null if successful)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.ErrorDetails">
            <summary>
            Detailed error information for debugging
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Timestamp">
            <summary>
            Timestamp when the response was generated (ISO 8601)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.CorrelationId">
            <summary>
            Request correlation ID for tracing
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Version">
            <summary>
            API version information
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ApiResponse`1.Meta">
            <summary>
            Additional metadata about the response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.Ok(`0,System.String,System.String)">
            <summary>
            Creates a successful response with data
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.Ok(System.String,System.String)">
            <summary>
            Creates a successful response without data
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.CreateError(System.String,System.String,System.Object,System.String)">
            <summary>
            Creates an error response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.ValidationError(System.String,System.Collections.Generic.Dictionary{System.String,System.String[]},System.String)">
            <summary>
            Creates a validation error response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.Unauthorized(System.String,System.String)">
            <summary>
            Creates an unauthorized response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.Forbidden(System.String,System.String)">
            <summary>
            Creates a forbidden response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.NotFound(System.String,System.String)">
            <summary>
            Creates a not found response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.InternalError(System.String,System.Object,System.String)">
            <summary>
            Creates an internal server error response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.WithMeta(System.String,System.Object)">
            <summary>
            Adds metadata to the response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Models.ApiResponse`1.WithCorrelationId(System.String)">
            <summary>
            Sets the correlation ID for request tracing
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.AuthApiResponse">
            <summary>
            Authentication-specific API response models
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.AuthApiResponse.AuthStatus">
            <summary>
            Authentication status response
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.AuthApiResponse.LoginResult">
            <summary>
            Login response
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.AuthApiResponse.TokenRefresh">
            <summary>
            Token refresh response
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.AuthApiResponse.LogoutResult">
            <summary>
            Logout response
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ErrorCodes">
            <summary>
            Common error codes used throughout EasyAuth API
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ApiUserInfo">
            <summary>
            User information in consistent API format
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.EAuthResponse`1">
            <summary>
            Standard API response wrapper
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.EAuthResponse`1.Success">
            <summary>
            Whether the operation was successful
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.EAuthResponse`1.Data">
            <summary>
            The response data (null if operation failed)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.EAuthResponse`1.Message">
            <summary>
            Human-readable message describing the result
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.EAuthResponse`1.ErrorCode">
            <summary>
            Error code for failed operations (null if successful)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.EAuthResponse`1.Timestamp">
            <summary>
            Timestamp when the response was generated
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.EAuthResponse`1.Metadata">
            <summary>
            Additional metadata about the operation
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.UserInfo">
            <summary>
            User information model
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.UserId">
            <summary>
            Unique user identifier
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.Email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.DisplayName">
            <summary>
            Display name for the user
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.FirstName">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.LastName">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.Roles">
            <summary>
            User roles and permissions
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.Claims">
            <summary>
            Additional claims from the authentication provider
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.IsAuthenticated">
            <summary>
            Whether the user is currently authenticated
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.LastLoginDate">
            <summary>
            Last successful login timestamp
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.ProfilePictureUrl">
            <summary>
            URL to the user's profile picture
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.AuthProvider">
            <summary>
            Authentication provider used for this session
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserInfo.LinkedAccounts">
            <summary>
            Other linked authentication accounts
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.UserAccount">
            <summary>
            User account model for provider linking
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserAccount.Provider">
            <summary>
            Authentication provider name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserAccount.ProviderId">
            <summary>
            User ID from the authentication provider
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserAccount.Email">
            <summary>
            Email address associated with this account
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserAccount.DisplayName">
            <summary>
            Display name from this account
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserAccount.LinkedDate">
            <summary>
            When this account was linked
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserAccount.IsPrimary">
            <summary>
            Whether this is the primary authentication account
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.SessionInfo">
            <summary>
            Session information model
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.SessionId">
            <summary>
            Unique session identifier
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.ExpiresAt">
            <summary>
            When the session expires
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.IsValid">
            <summary>
            Whether the session is currently valid
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.UserId">
            <summary>
            User ID associated with this session
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.IpAddress">
            <summary>
            IP address where the session was created
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.UserAgent">
            <summary>
            User agent string from the client
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.SessionInfo.AuthProvider">
            <summary>
            Authentication provider used for this session
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.LoginRequest">
            <summary>
            Login request model
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.LoginRequest.Provider">
            <summary>
            Authentication provider to use for login
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.LoginRequest.Email">
            <summary>
            Email address for login hint (optional)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.LoginRequest.ReturnUrl">
            <summary>
            URL to redirect to after successful login
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.LoginRequest.RememberMe">
            <summary>
            Whether to persist the login session
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.LoginRequest.Parameters">
            <summary>
            Additional parameters for the authentication provider
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.PasswordResetRequest">
            <summary>
            Password reset request model
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.PasswordResetRequest.Email">
            <summary>
            Email address for password reset
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.PasswordResetRequest.Provider">
            <summary>
            Authentication provider to handle the password reset
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ProviderInfo">
            <summary>
            Provider information model
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.Name">
            <summary>
            Internal provider name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.DisplayName">
            <summary>
            Human-readable provider name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.IsEnabled">
            <summary>
            Whether this provider is enabled and available
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.LoginUrl">
            <summary>
            URL to initiate login with this provider
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.IconUrl">
            <summary>
            URL to the provider's icon/logo
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.Description">
            <summary>
            Description of the authentication provider
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.SupportedScopes">
            <summary>
            OAuth scopes supported by this provider
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.Capabilities">
            <summary>
            Provider capabilities and features
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderInfo.Metadata">
            <summary>
            Additional provider metadata
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ProviderCapabilities">
            <summary>
            Provider capabilities and features
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportsPasswordReset">
            <summary>
            Supports password reset functionality
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportsProfileEditing">
            <summary>
            Supports profile editing
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportsAccountLinking">
            <summary>
            Supports account linking
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportsRefreshTokens">
            <summary>
            Supports refresh tokens
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportsLogout">
            <summary>
            Supports logout URL
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportedMethods">
            <summary>
            Supported authentication methods
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.SupportedScopes">
            <summary>
            Supported OAuth scopes
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderCapabilities.MaxSessionDurationMinutes">
            <summary>
            Maximum session duration in minutes
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ProviderHealth">
            <summary>
            Provider health status
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderHealth.ProviderName">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderHealth.IsHealthy">
            <summary>
            Whether the provider is healthy
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderHealth.LastChecked">
            <summary>
            Last health check timestamp
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderHealth.ResponseTimeMs">
            <summary>
            Response time in milliseconds
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderHealth.ErrorMessage">
            <summary>
            Health check error message (if any)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderHealth.Metrics">
            <summary>
            Additional health metrics
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.ProviderValidationResult">
            <summary>
            Provider validation result
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderValidationResult.IsValid">
            <summary>
            Whether all providers are valid
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderValidationResult.ValidationErrors">
            <summary>
            Validation error messages
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderValidationResult.ProviderResults">
            <summary>
            Provider-specific validation results
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.ProviderValidationResult.ValidatedAt">
            <summary>
            Validation timestamp
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.UserProfile">
            <summary>
            User profile model for API responses
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.Id">
            <summary>
            User unique identifier
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.Name">
            <summary>
            User display name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.ProfilePictureUrl">
            <summary>
            User profile picture URL
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.Locale">
            <summary>
            User locale preference
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.TimeZone">
            <summary>
            User timezone preference
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.CreatedAt">
            <summary>
            Account creation timestamp
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.LastLoginAt">
            <summary>
            Last login timestamp
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.Roles">
            <summary>
            User roles
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.UserProfile.CustomClaims">
            <summary>
            Custom user claims
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.RefreshTokenResult">
            <summary>
            Token refresh result
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.RefreshTokenResult.Success">
            <summary>
            Whether token refresh was successful
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.RefreshTokenResult.AccessToken">
            <summary>
            New access token
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.RefreshTokenResult.RefreshToken">
            <summary>
            New refresh token (if rotated)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.RefreshTokenResult.ExpiresIn">
            <summary>
            Token expiration in seconds
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.RefreshTokenResult.Error">
            <summary>
            Error code if refresh failed
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.RefreshTokenResult.ErrorDescription">
            <summary>
            Human-readable error description
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.AuthenticationResult">
            <summary>
            Authentication initiation result
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.AuthenticationResult.Success">
            <summary>
            Whether authentication initiation was successful
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.AuthenticationResult.AuthUrl">
            <summary>
            OAuth provider authorization URL
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.AuthenticationResult.State">
            <summary>
            CSRF protection state parameter
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.AuthenticationResult.Error">
            <summary>
            Error code if initiation failed
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.AuthenticationResult.ErrorDescription">
            <summary>
            Human-readable error description
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Models.TokenResponse">
            <summary>
            OAuth token response model for authentication providers
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.AccessToken">
            <summary>
            OAuth access token
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.IdToken">
            <summary>
            OpenID Connect ID token (JWT)
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.RefreshToken">
            <summary>
            OAuth refresh token for token renewal
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.TokenType">
            <summary>
            Token type (typically "Bearer")
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.ExpiresIn">
            <summary>
            Token lifetime in seconds
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.Scope">
            <summary>
            OAuth scopes granted for this token
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.IssuedAt">
            <summary>
            When the token was issued
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Models.TokenResponse.ExpiresAt">
            <summary>
            When the token expires (calculated from IssuedAt + ExpiresIn)
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Providers.AppleAuthProvider">
            <summary>
            Apple Sign-In authentication provider implementation
            Follows TDD methodology - minimal implementation to make tests pass
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.GetAuthorizationUrlAsync(System.String)">
            <summary>
            Generates Apple Sign-In authorization URL with client_id, scopes, and state parameters
            Apple uses form_post response mode for security and requires nonce for id_token validation
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.ExchangeCodeForTokenAsync(System.String,System.String)">
            <summary>
            Exchanges Apple Sign-In authorization code for access and ID tokens
            Returns mock tokens in TDD GREEN phase - real implementation would call Apple's token endpoint
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.GetUserInfoAsync(EasyAuth.Framework.Core.Models.TokenResponse)">
            <summary>
            Extracts user information from Apple ID token JWT claims
            Apple provides user data in id_token rather than a separate userinfo endpoint
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.GetLoginUrlAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates Apple Sign-In login URL - delegates to GetAuthorizationUrlAsync
            Apple authentication follows standard OAuth 2.0 flow with OIDC extensions
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.HandleCallbackAsync(System.String,System.String)">
            <summary>
            Handles Apple Sign-In callback by exchanging code for tokens and extracting user info
            Returns standardized EAuthResponse with success/error status and user data
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.GetLogoutUrlAsync(System.String)">
            <summary>
            Returns logout redirect URL for Apple Sign-In
            Apple doesn't provide centralized logout - returns local redirect URL
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.GetPasswordResetUrlAsync(System.String)">
            <summary>
            Apple Sign-In doesn't support direct password reset URLs
            Users must manage passwords through Apple ID settings
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AppleAuthProvider.ValidateConfigurationAsync">
            <summary>
            Validates Apple Sign-In configuration including ClientId, TeamId, and KeyId
            Required for Apple's certificate-based authentication
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider">
            <summary>
            Azure B2C authentication provider implementation
            Follows TDD methodology - minimal implementation to make tests pass
            Supports B2C-specific features like custom policies and id_token claims extraction
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.GetAuthorizationUrlAsync(System.String)">
            <summary>
            Generates Azure B2C authorization URL with custom policy and nonce for OIDC compliance
            Uses B2C-specific authority endpoint and supports policy-based authentication flows
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.ExchangeCodeForTokenAsync(System.String,System.String)">
            <summary>
            Exchanges Azure B2C authorization code for access token and ID token
            Returns mock B2C tokens in TDD phase - real implementation calls B2C token endpoint
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.GetUserInfoAsync(EasyAuth.Framework.Core.Models.TokenResponse)">
            <summary>
            Extracts user information from Azure B2C ID token claims
            B2C provides user data in id_token JWT rather than separate userinfo endpoint
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.GetLoginUrlAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates Azure B2C login URL with support for custom policies
            Allows policy override through 'p' parameter for specialized B2C flows
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.HandleCallbackAsync(System.String,System.String)">
            <summary>
            Handles Azure B2C OAuth callback with policy-aware token processing
            Returns standardized response with B2C-specific error handling and logging
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.GetLogoutUrlAsync(System.String)">
            <summary>
            Generates Azure B2C logout URL with policy and post-logout redirect
            Uses B2C-specific logout endpoint for complete session termination
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.GetPasswordResetUrlAsync(System.String)">
            <summary>
            Generates Azure B2C password reset URL using configured reset policy
            Returns null if password reset policy is not configured in B2C tenant
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.AzureB2CAuthProvider.ValidateConfigurationAsync">
            <summary>
            Validates Azure B2C configuration including TenantId, ClientId, ClientSecret, and policies
            Ensures required B2C-specific settings like SignUpSignInPolicyId are configured
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Providers.FacebookAuthProvider">
            <summary>
            Facebook/Meta authentication provider implementation
            Follows TDD methodology - minimal implementation to make tests pass
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.GetAuthorizationUrlAsync(System.String)">
            <summary>
            Generates Facebook OAuth authorization URL using Graph API v18.0
            Uses comma-separated scopes format specific to Facebook's OAuth implementation
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.ExchangeCodeForTokenAsync(System.String,System.String)">
            <summary>
            Exchanges Facebook authorization code for long-lived access token
            Returns mock token in TDD GREEN phase - Facebook tokens have extended expiry (5183944 seconds)
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.GetUserInfoAsync(EasyAuth.Framework.Core.Models.TokenResponse)">
            <summary>
            Creates user info from Facebook access token
            Returns mock Graph API user data in TDD phase - real implementation queries /me endpoint
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.GetLoginUrlAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generates Facebook login URL - delegates to GetAuthorizationUrlAsync
            Facebook OAuth follows standard flow with app-specific scopes and permissions
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.HandleCallbackAsync(System.String,System.String)">
            <summary>
            Handles Facebook OAuth callback with token exchange and user data retrieval
            Returns standardized response with Facebook-specific error codes and messages
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.GetLogoutUrlAsync(System.String)">
            <summary>
            Returns local logout redirect URL for Facebook authentication
            Facebook doesn't provide centralized logout URL - applications manage sessions locally
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.GetPasswordResetUrlAsync(System.String)">
            <summary>
            Facebook doesn't support direct password reset URLs
            Users must reset passwords through Facebook's own account recovery process
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.FacebookAuthProvider.ValidateConfigurationAsync">
            <summary>
            Validates Facebook OAuth configuration including AppId and AppSecret
            Uses secure configuration service to verify Facebook app credentials
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Providers.GoogleAuthProvider">
            <summary>
            Google OAuth 2.0 authentication provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.GetAuthorizationUrlAsync(System.String)">
            <summary>
            Generates Google OAuth 2.0 authorization URL with consent prompt and offline access
            Delegates to GetLoginUrlAsync for consistency in Google's OAuth implementation
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.ExchangeCodeForTokenAsync(System.String,System.String)">
            <summary>
            Exchanges Google OAuth authorization code for access and refresh tokens
            Makes HTTP POST request to Google's token endpoint with client credentials
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.GetUserInfoAsync(EasyAuth.Framework.Core.Models.TokenResponse)">
            <summary>
            Retrieves Google user profile information using access token
            Calls Google's userinfo endpoint and maps to standardized UserInfo model
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.GetLoginUrlAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds Google OAuth login URL with scopes, state, and custom parameters
            Uses consent prompt and offline access for refresh token capability
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.HandleCallbackAsync(System.String,System.String)">
            <summary>
            Processes Google OAuth callback by exchanging code for tokens and retrieving user info
            Handles errors gracefully with detailed error codes and logging
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.GetLogoutUrlAsync(System.String)">
            <summary>
            Returns local logout redirect URL for Google OAuth
            Google doesn't provide centralized logout - applications handle session cleanup
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.GetPasswordResetUrlAsync(System.String)">
            <summary>
            Returns Google's account recovery URL for password reset
            Google handles password reset through their account recovery system
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Providers.GoogleAuthProvider.ValidateConfigurationAsync">
            <summary>
            Validates Google OAuth configuration including ClientId and ClientSecret
            Uses secure configuration service to verify required credentials
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.ConfigurationService">
            <summary>
            Unified configuration service that implements graceful fallback pattern for secrets and config values
            Fallback chain: Key Vault → Environment Variable → App Settings → Default Value
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.ConfigurationService.GetSecretValue(System.String,System.String,System.String)">
            <summary>
            Retrieves secret values using graceful fallback chain: Key Vault → Environment → App Settings → Default
            Logs security-aware messages without exposing actual secret values in logs
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.ConfigurationService.GetRequiredSecretValue(System.String,System.String)">
            <summary>
            Retrieves required secret values with validation and detailed error reporting
            Throws InvalidOperationException with comprehensive source list if secret is not found
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.ConfigurationService.GetConfigValue(System.String,System.String,System.String)">
            <summary>
            Retrieves non-sensitive configuration values with Environment → App Settings → Default fallback
            Prioritizes environment variables for containerized deployment scenarios
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.ConfigurationService.ValidateRequiredSecrets(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates multiple required secrets and detects placeholder/test values for security
            Returns comprehensive error list for configuration validation during startup
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.EAuthDatabaseService">
            <summary>
            Implementation of database setup service that auto-configures required database objects
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.InitializeDatabaseAsync">
            <summary>
            Creates EasyAuth database schema, tables, and stored procedures from embedded SQL scripts
            Executes initialization scripts in sequence and seeds framework metadata
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.IsDatabaseInitializedAsync">
            <summary>
            Checks if EasyAuth database is properly initialized by verifying framework_metadata table exists
            Returns true if core schema and metadata tables are present in the database
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.ApplyMigrationsAsync">
            <summary>
            Applies pending database migrations to upgrade schema to current version
            Checks current version and executes version-specific upgrade scripts
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.GetDatabaseVersionAsync">
            <summary>
            Retrieves current database schema version from framework_metadata table
            Returns '0.0.0' if metadata table doesn't exist or version is not recorded
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.CleanupExpiredDataAsync">
            <summary>
            Removes expired sessions and old audit log entries to maintain database performance
            Deactivates sessions past expiry time and deletes audit logs older than 90 days
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.ValidateSessionAsync(System.String)">
            <summary>
            Validates session token against database and returns session information if active
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthDatabaseService.InvalidateSessionAsync(System.String)">
            <summary>
            Marks user session as inactive in database for logout functionality
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.EAuthProviderFactory">
            <summary>
            Factory for creating and managing authentication providers
            Follows TDD methodology - minimal implementation to make tests pass
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetProvidersAsync">
            <summary>
            Retrieves all configured and enabled authentication providers from options and custom registrations
            Checks configuration settings and creates provider instances on-demand with caching
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetProviderAsync(System.String)">
            <summary>
            Gets specific authentication provider by name with caching support
            Checks custom providers first, then built-in providers, creating instances as needed
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetDefaultProviderAsync">
            <summary>
            Returns the configured default provider or first enabled provider if no default is set
            Useful for single sign-on scenarios where user doesn't specify provider preference
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.ValidateProvidersAsync">
            <summary>
            Validates configuration of all registered providers and returns comprehensive validation results
            Executes provider-specific configuration checks and aggregates success/failure status
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetProviderInfoAsync(System.String)">
            <summary>
            Retrieves comprehensive provider metadata including capabilities, login URLs, and configuration
            Combines provider instance data with static metadata like icons and descriptions
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetAllProviderInfoAsync">
            <summary>
            Gets metadata for all providers including disabled ones for UI configuration purposes
            Useful for admin interfaces that need to show all possible provider options
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.RegisterCustomProviderAsync(System.String,EasyAuth.Framework.Core.Services.IEAuthProvider)">
            <summary>
            Registers a custom authentication provider implementation for extensibility
            Allows applications to add non-standard providers while maintaining factory consistency
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetProviderCapabilitiesAsync(System.String)">
            <summary>
            Returns detailed capabilities for specific provider including supported features and limits
            Defines what authentication features each provider supports (password reset, linking, etc.)
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetProvidersByCapabilityAsync(System.String)">
            <summary>
            Filters available providers by specific capability (password reset, account linking, etc.)
            Enables feature-specific provider selection based on application requirements
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.RefreshProviderCacheAsync">
            <summary>
            Clears provider and health caches to force recreation of provider instances
            Used when configuration changes require fresh provider instances
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetProviderHealthAsync(System.String)">
            <summary>
            Performs health check on specific provider including configuration validation and response time
            Caches results for 5 minutes to avoid excessive health check overhead
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthProviderFactory.GetAllProviderHealthAsync">
            <summary>
            Executes health checks for all registered providers and returns aggregate health status
            Useful for monitoring dashboards and system health endpoints
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.EAuthService">
            <summary>
            Main authentication service implementation
            This is a minimal stub implementation following TDD approach:
            Tests are written first, then this stub allows compilation,
            then proper implementation follows in GREEN phase
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.GetProvidersAsync">
            <summary>
            Retrieves list of configured authentication providers with their status and capabilities
            Currently returns mock Google provider in TDD GREEN phase - will be enhanced to query all configured providers
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.InitiateLoginAsync(EasyAuth.Framework.Core.Models.LoginRequest)">
            <summary>
            Initiates authentication flow by generating provider-specific login URL
            Validates provider and generates state parameter for OAuth security - currently supports Google only in TDD phase
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.HandleAuthCallbackAsync(System.String,System.String,System.String)">
            <summary>
            Processes OAuth callback by validating parameters and simulating successful authentication
            TDD GREEN phase returns mock user data - will be enhanced to delegate to specific providers
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.SignOutAsync(System.String)">
            <summary>
            Signs out user by invalidating their session in the database
            Calls database service to mark session as inactive and logs the operation
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.GetCurrentUserAsync">
            <summary>
            Retrieves current authenticated user information from session context
            TDD stub implementation - returns not authenticated status until proper session management is implemented
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.ValidateSessionAsync(System.String)">
            <summary>
            Validates active user session by checking database and expiry status
            Delegates to database service for session verification and returns standardized response
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.LinkAccountAsync(System.String,System.String,System.String)">
            <summary>
            Links additional authentication provider to existing user account
            TDD stub implementation - will enable multi-provider account linking in future iterations
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.UnlinkAccountAsync(System.String)">
            <summary>
            Removes authentication provider link from user account
            TDD stub implementation - will enable provider unlinking with proper validation in future iterations
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.InitiatePasswordResetAsync(EasyAuth.Framework.Core.Models.PasswordResetRequest)">
            <summary>
            Initiates password reset flow for providers that support it
            TDD stub implementation - will delegate to provider-specific password reset URLs when implemented
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.GetUserProfileAsync(System.String)">
            <summary>
            Retrieves user profile information by user ID for StandardApiController
            TDD stub implementation - returns basic profile information for authenticated users
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.RefreshTokenAsync(System.String)">
            <summary>
            Refreshes JWT access token using refresh token for StandardApiController
            TDD stub implementation - returns mock refresh result for valid tokens
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.InitiateAuthenticationAsync(System.String,System.String)">
            <summary>
            Initiates OAuth authentication flow for StandardApiController
            TDD stub implementation - generates OAuth authorization URLs for supported providers
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.EAuthService.SignOutUserAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Signs out user using ClaimsPrincipal for StandardApiController
            TDD stub implementation - clears session for authenticated users
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.IConfigurationService">
            <summary>
            Provides unified configuration lookup with Key Vault/environment variable fallback pattern
            This service abstracts the complexity of looking up secrets from multiple sources
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IConfigurationService.GetSecretValue(System.String,System.String,System.String)">
            <summary>
            Gets a configuration value with fallback chain: Key Vault → Environment Variable → App Settings → Default
            </summary>
            <param name="key">The configuration key (e.g., "Apple:JwtSecret")</param>
            <param name="fallbackEnvVar">Optional environment variable name to check</param>
            <param name="defaultValue">Optional default value if not found anywhere</param>
            <returns>The configuration value or null if not found</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IConfigurationService.GetRequiredSecretValue(System.String,System.String)">
            <summary>
            Gets a required configuration value with fallback chain, throws if not found
            </summary>
            <param name="key">The configuration key</param>
            <param name="fallbackEnvVar">Optional environment variable name to check</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the required value is not found</exception>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IConfigurationService.GetConfigValue(System.String,System.String,System.String)">
            <summary>
            Gets a regular configuration value (non-secret) with environment variable fallback
            </summary>
            <param name="key">The configuration key</param>
            <param name="fallbackEnvVar">Optional environment variable name to check</param>
            <param name="defaultValue">Optional default value</param>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IConfigurationService.ValidateRequiredSecrets(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates that all required secrets are configured
            </summary>
            <param name="requiredSecrets">Dictionary of secret keys and their descriptions</param>
            <returns>List of validation errors, empty if all secrets are valid</returns>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.IEAuthDatabaseService">
            <summary>
            Service interface for automatic database setup and migration
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.InitializeDatabaseAsync">
            <summary>
            Initialize the database with required tables and stored procedures
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.IsDatabaseInitializedAsync">
            <summary>
            Check if the database is properly initialized
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.ApplyMigrationsAsync">
            <summary>
            Apply any pending migrations
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.GetDatabaseVersionAsync">
            <summary>
            Get the current database version
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.CleanupExpiredDataAsync">
            <summary>
            Clean up expired sessions and audit logs
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.ValidateSessionAsync(System.String)">
            <summary>
            Validate a session token and return session information
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthDatabaseService.InvalidateSessionAsync(System.String)">
            <summary>
            Invalidate a session token (logout)
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.IEAuthProvider">
            <summary>
            Authentication provider interface for pluggable authentication strategies
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Services.IEAuthProvider.ProviderName">
            <summary>
            Provider name (e.g., "AzureB2C", "Google", "Apple", "Facebook")
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Services.IEAuthProvider.DisplayName">
            <summary>
            Display name for UI
            </summary>
        </member>
        <member name="P:EasyAuth.Framework.Core.Services.IEAuthProvider.IsEnabled">
            <summary>
            Whether this provider is enabled
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.GetAuthorizationUrlAsync(System.String)">
            <summary>
            Generate authorization URL for OAuth flow
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.ExchangeCodeForTokenAsync(System.String,System.String)">
            <summary>
            Exchange authorization code for access tokens
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.GetUserInfoAsync(EasyAuth.Framework.Core.Models.TokenResponse)">
            <summary>
            Get user information from provider using tokens
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.GetLoginUrlAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Generate login URL for this provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.HandleCallbackAsync(System.String,System.String)">
            <summary>
            Handle authentication callback from provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.GetLogoutUrlAsync(System.String)">
            <summary>
            Generate logout URL for this provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.GetPasswordResetUrlAsync(System.String)">
            <summary>
            Get password reset URL (if supported by provider)
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProvider.ValidateConfigurationAsync">
            <summary>
            Validate provider-specific configuration
            </summary>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.IEAuthProviderFactory">
            <summary>
            Factory interface for creating and managing authentication providers
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetProvidersAsync">
            <summary>
            Gets all available authentication providers
            </summary>
            <returns>Collection of enabled authentication providers</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetProviderAsync(System.String)">
            <summary>
            Gets a specific authentication provider by name
            </summary>
            <param name="providerName">Provider name (case-insensitive)</param>
            <returns>Authentication provider or null if not found/disabled</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetDefaultProviderAsync">
            <summary>
            Gets the default authentication provider
            </summary>
            <returns>Default authentication provider</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.ValidateProvidersAsync">
            <summary>
            Validates all provider configurations
            </summary>
            <returns>Validation result with errors if any</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetProviderInfoAsync(System.String)">
            <summary>
            Gets provider information for client applications
            </summary>
            <param name="providerName">Provider name</param>
            <returns>Provider information or null if not found</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetAllProviderInfoAsync">
            <summary>
            Gets information for all providers
            </summary>
            <returns>Collection of provider information</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.RegisterCustomProviderAsync(System.String,EasyAuth.Framework.Core.Services.IEAuthProvider)">
            <summary>
            Registers a custom authentication provider
            </summary>
            <param name="providerName">Provider name</param>
            <param name="provider">Provider instance</param>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetProviderCapabilitiesAsync(System.String)">
            <summary>
            Gets provider capabilities
            </summary>
            <param name="providerName">Provider name</param>
            <returns>Provider capabilities or null if not found</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetProvidersByCapabilityAsync(System.String)">
            <summary>
            Gets providers that support a specific capability
            </summary>
            <param name="capability">Capability name (e.g., "PasswordReset", "ProfileEditing")</param>
            <returns>Providers that support the capability</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.RefreshProviderCacheAsync">
            <summary>
            Refreshes the provider cache
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetProviderHealthAsync(System.String)">
            <summary>
            Gets provider health status
            </summary>
            <param name="providerName">Provider name</param>
            <returns>Provider health status or null if not found</returns>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthProviderFactory.GetAllProviderHealthAsync">
            <summary>
            Gets health status for all providers
            </summary>
            <returns>Collection of provider health statuses</returns>
        </member>
        <member name="T:EasyAuth.Framework.Core.Services.IEAuthService">
            <summary>
            Main authentication service interface
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.GetProvidersAsync">
            <summary>
            Get all available authentication providers
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.InitiateLoginAsync(EasyAuth.Framework.Core.Models.LoginRequest)">
            <summary>
            Initiate login with specific provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.HandleAuthCallbackAsync(System.String,System.String,System.String)">
            <summary>
            Handle authentication callback
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.SignOutAsync(System.String)">
            <summary>
            Sign out user and invalidate session
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.GetCurrentUserAsync">
            <summary>
            Get current user information
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.ValidateSessionAsync(System.String)">
            <summary>
            Validate current session
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.LinkAccountAsync(System.String,System.String,System.String)">
            <summary>
            Link account from another provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.UnlinkAccountAsync(System.String)">
            <summary>
            Unlink account from provider
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.InitiatePasswordResetAsync(EasyAuth.Framework.Core.Models.PasswordResetRequest)">
            <summary>
            Initiate password reset (for supported providers)
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.GetUserProfileAsync(System.String)">
            <summary>
            Get user profile by user ID
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.RefreshTokenAsync(System.String)">
            <summary>
            Refresh JWT access token using refresh token
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.InitiateAuthenticationAsync(System.String,System.String)">
            <summary>
            Initiate OAuth authentication flow
            </summary>
        </member>
        <member name="M:EasyAuth.Framework.Core.Services.IEAuthService.SignOutUserAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Sign out user using ClaimsPrincipal
            </summary>
        </member>
    </members>
</doc>
